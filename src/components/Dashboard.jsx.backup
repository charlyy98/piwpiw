import React, { useState, useEffect } from 'react';
import { useApp } from '../contexts/AppContext';
import { Badge } from './ui/badge';
import { Button } from './ui/button';
import { Progress } from './ui/progress';
import {
  Server, 
  Users, 
  Terminal, 
  Clock, 
  TrendingUp, 
  Activity, 
  Shield, 
  Zap,
  Globe,
  MessageSquare,
  Bot,
  Crown,
  Star,
  ArrowUpRight,
  ArrowDownRight,
  Sparkles,
  BarChart3,
  PieChart,
  Settings,
  Bell,
  Gift,
  Hash,
  X,
  CheckCircle,
  AlertTriangle,
  Info
} from 'lucide-react';
import { LineChart, Line, XAxis, YAxis, Tooltip, BarChart, Bar } from 'recharts';
import mockData from '../data/mockData.json';
import chibiCharacter from '../assets/chibi_character.png';

const Dashboard = () => {
  const { t, user, theme } = useApp();
  const [currentTime, setCurrentTime] = useState(new Date());
  const [selectedPeriod, setSelectedPeriod] = useState('7d');
  const [showNotifications, setShowNotifications] = useState(false);

  // Notification data - professional bot notifications
  const notifications = [
    {
      id: 1,
      type: 'success',
      title: 'Bot Update Completed',
      message: 'PiwPiw Bot v2.3.1 has been successfully deployed to all servers',
      timestamp: '2 minutes ago',
      icon: CheckCircle,
      priority: 'high'
    },
    {
      id: 2,
      type: 'warning',
      title: 'Server Maintenance',
      message: 'Scheduled maintenance on Server #3 will begin in 30 minutes',
      timestamp: '15 minutes ago',
      icon: AlertTriangle,
      priority: 'medium'
    },
    {
      id: 3,
      type: 'info',
      title: 'New Feature Available',
      message: 'Advanced analytics dashboard is now available for premium users',
      timestamp: '1 hour ago',
      icon: Info,
      priority: 'low'
    },
    {
      id: 4,
      type: 'success',
      title: 'Performance Improved',
      message: 'Response time decreased by 23% after recent optimizations',
      timestamp: '2 hours ago',
      icon: TrendingUp,
      priority: 'medium'
    },
    {
      id: 5,
      type: 'info',
      title: 'User Milestone',
      message: 'Congratulations! You\'ve reached 1,000 active users',
      timestamp: '1 day ago',
      icon: Star,
      priority: 'low'
    }
  ];

  // Update time every second for real-time feel
  useEffect(() => {
    const timer = setInterval(() => setCurrentTime(new Date()), 1000);
    return () => clearInterval(timer);
  }, []);

  // Enhanced stats with trends and animations
  const enhancedStats = [
    {
      title: 'Total Servers',
      value: '1,247',
      change: '+12.5%',
      trend: 'up',
      icon: Server,
      color: 'from-blue-500 to-blue-600',
      textColor: 'text-blue-600',
      bgColor: 'bg-blue-500/10',
      description: 'Servers using PiwPiw'
    },
    {
      title: 'Active Users',
      value: '89.4K',
      change: '+8.7%',
      trend: 'up',
      icon: Users,
      color: 'from-emerald-500 to-emerald-600',
      textColor: 'text-emerald-600',
      bgColor: 'bg-emerald-500/10',
      description: 'Monthly active users'
    },
    {
      title: 'Commands Executed',
      value: '2.1M',
      change: '+15.3%',
      trend: 'up',
      icon: Terminal,
      color: 'from-purple-500 to-purple-600',
      textColor: 'text-purple-600',
      bgColor: 'bg-purple-500/10',
      description: 'Total this month'
    },
    {
      title: 'System Uptime',
      value: '99.98%',
      change: '+0.1%',
      trend: 'up',
      icon: Shield,
      color: 'from-amber-500 to-amber-600',
      textColor: 'text-amber-600',
      bgColor: 'bg-amber-500/10',
      description: '30-day average'
    }
  ];

  // Performance metrics
  const performanceMetrics = [
    { name: 'Response Time', value: 98, color: 'bg-green-500', description: '< 50ms avg' },
    { name: 'Success Rate', value: 99.8, color: 'bg-blue-500', description: '99.8% uptime' },
    { name: 'User Satisfaction', value: 96, color: 'bg-purple-500', description: '4.8/5 rating' },
    { name: 'Resource Usage', value: 23, color: 'bg-orange-500', description: '23% CPU avg' }
  ];

  // Chart colors
  const chartColors = ['#3B82F6', '#10B981', '#8B5CF6', '#F59E0B', '#EF4444', '#06B6D4'];

  return (
    <div className={`min-h-screen p-4 space-y-6 transition-colors duration-300 relative ${
      theme === 'dark' 
        ? 'bg-slate-900' 
        : 'bg-amber-50'
    }`}>
      {/* Fixed Notification Button - Always visible in top-right corner */}
      <div className="fixed top-4 right-4 z-50">
        <div className="relative">
          <button
            onClick={() => setShowNotifications(!showNotifications)}
            className="relative p-2 sm:p-3 bg-gradient-to-r from-blue-600 via-purple-600 to-indigo-600 backdrop-blur-sm rounded-full hover:from-blue-500 hover:via-purple-500 hover:to-indigo-500 transition-all duration-300 hover:scale-110 group shadow-2xl border-2 border-white/20 flex items-center justify-center"
            style={{ minWidth: '48px', minHeight: '48px' }}
          >
            <Bell className="w-5 h-5 sm:w-6 sm:h-6 text-white group-hover:animate-bounce" />
            {/* Notification Badge */}
            <div className="absolute -top-1 -right-1 w-4 h-4 sm:w-5 sm:h-5 bg-red-500 rounded-full flex items-center justify-center shadow-lg border-2 border-white">
              <span className="text-xs font-bold text-white">{notifications.filter(n => n.priority === 'high').length}</span>
            </div>
            {/* Pulse Animation */}
            <div className="absolute inset-0 rounded-full bg-red-400/30 animate-ping"></div>
            {/* Hover Glow Effect */}
            <div className="absolute inset-0 rounded-full bg-white/20 opacity-0 group-hover:opacity-100 transition-opacity duration-300 blur-md"></div>
          </button>
          
          {/* Tooltip */}
          <div className="absolute -bottom-12 left-1/2 transform -translate-x-1/2 opacity-0 group-hover:opacity-100 transition-all duration-300 pointer-events-none">
            <div className="bg-black/80 backdrop-blur-sm text-white text-xs px-2 py-1 rounded-lg whitespace-nowrap">
              System Notifications
              <div className="absolute -top-1 left-1/2 transform -translate-x-1/2 w-2 h-2 bg-black/80 rotate-45"></div>
            </div>
          </div>
        </div>
      </div>

      {/* Professional Header Section */}
      <div className="relative overflow-hidden bg-gradient-to-r from-blue-600 via-purple-600 to-indigo-600 rounded-2xl p-6 text-white shadow-2xl">
        <div className="absolute inset-0 bg-black/10"></div>
        <div className="absolute -top-10 -right-10 w-20 h-20 bg-white/10 rounded-full blur-2xl"></div>
        <div className="absolute -bottom-10 -left-10 w-20 h-20 bg-white/10 rounded-full blur-2xl"></div>
        
        <div className="relative flex flex-col lg:flex-row items-center justify-between gap-4 w-full pr-16">
          {/* Main Content - Now has more space */}
          <div className="flex-1 min-w-0 space-y-3 text-center lg:text-left">
            <div className="inline-flex items-center space-x-2 bg-white/20 backdrop-blur-sm rounded-full px-3 py-1.5">
              <Crown className="w-4 h-4 text-yellow-300" />
              <span className="text-sm font-bold">Enterprise Dashboard</span>
            </div>
            
            <h1 className="text-2xl md:text-3xl lg:text-4xl font-black leading-tight">
              Welcome back, <span className="text-yellow-300">{user?.username || 'Piwpiw'}</span>
            </h1>
            
            <p className="text-sm md:text-base lg:text-lg text-blue-100 max-w-2xl">
              Your PiwPiw Bot empire is thriving across {enhancedStats[0].value} servers with unprecedented performance
            </p>
            
          <div className="flex flex-wrap justify-center lg:justify-start gap-2 md:gap-3 mt-4">
            <div className="flex items-center space-x-2 bg-white/20 backdrop-blur-sm rounded-full px-2 md:px-3 py-1.5">
              <div className="w-2 h-2 bg-green-400 rounded-full animate-pulse"></div>
              <span className="text-xs md:text-sm font-semibold">All Systems Operational</span>
            </div>
            <div className="flex items-center space-x-2 bg-white/20 backdrop-blur-sm rounded-full px-2 md:px-3 py-1.5">
              <Clock className="w-3 md:w-4 h-3 md:h-4" />
              <span className="text-xs md:text-sm font-semibold">{currentTime.toLocaleTimeString()}</span>
            </div>
          </div>
          
          {/* Character Section - Moved notification button out */}
          <div className="flex items-center space-x-3 md:space-x-4 shrink-0">
            {/* Character - Responsive sizing */}
            <div className="relative">
              <div className="absolute -inset-2 md:-inset-3 bg-gradient-to-r from-yellow-400 to-pink-400 rounded-full blur-lg opacity-30 animate-pulse"></div>
              <div className="absolute -inset-2 md:-inset-3 bg-gradient-to-r from-yellow-400 to-pink-400 rounded-full blur-lg opacity-30 animate-pulse"></div>
              <img 
                src={chibiCharacter} 
                alt="PiwPiw Character" 
                className="relative h-16 md:h-20 lg:h-24 w-auto drop-shadow-2xl animate-bounce"
              />
            </div>
          </div>
        </div>
      </div>

      {/* Stats grid */}
      {/* Enhanced Statistics Grid */}
      <div className="grid grid-cols-1 md:grid-cols-2 xl:grid-cols-4 gap-4">
        {enhancedStats.map((stat, index) => (
          <div 
            key={index}
            className={`group relative overflow-hidden backdrop-blur-xl rounded-xl p-5 border shadow-xl hover:shadow-2xl transition-all duration-500 hover:scale-105 ${
              theme === 'dark'
                ? 'bg-slate-800/80 border-slate-700/50'
                : 'bg-amber-100/90 border-amber-300/80 shadow-amber-200/50 hover:shadow-amber-300/60'
            }`}
          >
            {/* Gradient background */}
            <div className={`absolute inset-0 bg-gradient-to-br ${stat.color} opacity-0 group-hover:opacity-5 transition-opacity duration-500`}></div>
            
            {/* Icon */}
            <div className={`relative inline-flex items-center justify-center w-12 h-12 ${stat.bgColor} rounded-xl mb-3 group-hover:scale-110 transition-transform duration-300`}>
              <stat.icon className={`w-6 h-6 ${stat.textColor}`} />
            </div>
            
            {/* Content */}
            <div className="relative space-y-2">
              <div className="flex items-center justify-between">
                <h3 className={`text-sm font-semibold uppercase tracking-wide ${
                  theme === 'dark' ? 'text-slate-400' : 'text-amber-700'
                }`}>
                  {stat.title}
                </h3>
                <div className={`flex items-center space-x-1 text-xs font-bold ${stat.trend === 'up' ? 'text-emerald-600' : 'text-red-500'}`}>
                  {stat.trend === 'up' ? (
                    <ArrowUpRight className="w-3 h-3" />
                  ) : (
                    <ArrowDownRight className="w-3 h-3" />
                  )}
                  <span>{stat.change}</span>
                </div>
              </div>
              
              <div className="space-y-1">
                <div className={`text-3xl font-black ${
                  theme === 'dark' ? 'text-white' : 'text-amber-900'
                }`}>
                  {stat.value}
                </div>
                <p className={`text-xs ${
                  theme === 'dark' ? 'text-slate-400' : 'text-amber-600'
                }`}>
                  {stat.description}
                </p>
              </div>
            </div>
            
            {/* Sparkle effect */}
            <Sparkles className="absolute top-4 right-4 w-4 h-4 text-yellow-400 opacity-0 group-hover:opacity-100 transition-opacity duration-300" />
          </div>
        ))}
      </div>

      {/* Performance Metrics Section */}
      {/* Performance Metrics Section */}
      <div className={`backdrop-blur-xl rounded-2xl p-6 shadow-xl border ${
        theme === 'dark'
          ? 'bg-slate-800/80 border-slate-700/50'
          : 'bg-amber-100/90 border-amber-300/80 shadow-amber-200/50'
      }`}>
        <div className="flex items-center justify-between mb-6">
          <div className="space-y-1">
            <h2 className={`text-xl font-black flex items-center space-x-2 ${
              theme === 'dark' ? 'text-white' : 'text-amber-900'
            }`}>
              <Activity className="w-6 h-6 text-blue-600" />
              <span>System Performance</span>
            </h2>
            <p className={theme === 'dark' ? 'text-slate-400' : 'text-amber-700'}>Real-time performance indicators</p>
          </div>
          <Button variant="outline" size="sm" className={`flex items-center space-x-2 ${
            theme === 'dark' ? 'hover:bg-slate-700' : 'hover:bg-amber-200'
          }`}>
            <Settings className="w-4 h-4" />
            <span>Configure</span>
          </Button>
        </div>
        
        <div className="grid grid-cols-1 md:grid-cols-2 xl:grid-cols-4 gap-4">
          {performanceMetrics.map((metric, index) => (
            <div key={index} className="space-y-3">
              <div className="flex items-center justify-between">
                <span className={`text-sm font-semibold ${
                  theme === 'dark' ? 'text-slate-300' : 'text-amber-800'
                }`}>{metric.name}</span>
                <span className={`text-lg font-black ${
                  theme === 'dark' ? 'text-white' : 'text-amber-900'
                }`}>{metric.value}%</span>
              </div>
              <div className="relative">
                <div className={`w-full rounded-full h-2.5 overflow-hidden ${
                  theme === 'dark' ? 'bg-slate-700' : 'bg-amber-200'
                }`}>
                  <div 
                    className={`h-full ${metric.color} rounded-full transition-all duration-1000 ease-out relative overflow-hidden`}
                    style={{ width: `${metric.value}%` }}
                  >
                    <div className="absolute inset-0 bg-gradient-to-r from-transparent via-white/30 to-transparent animate-pulse"></div>
                  </div>
                </div>
              </div>
              <p className={`text-xs ${
                theme === 'dark' ? 'text-slate-400' : 'text-amber-600'
              }`}>{metric.description}</p>
            </div>
          ))}
        </div>
      </div>      {/* Advanced Charts Section */}
      <div className="grid grid-cols-1 xl:grid-cols-2 gap-6">
        {/* Enhanced Line Chart */}
        <div className={`backdrop-blur-xl rounded-2xl p-6 shadow-xl border ${
          theme === 'dark'
            ? 'bg-slate-800/80 border-slate-700/50'
            : 'bg-amber-100/90 border-amber-300/80 shadow-amber-200/50'
        }`}>
          <div className="flex items-center justify-between mb-5">
            <div className="space-y-1">
              <h3 className={`text-lg font-black flex items-center space-x-2 ${
                theme === 'dark' ? 'text-white' : 'text-amber-900'
              }`}>
                <TrendingUp className="w-5 h-5 text-emerald-600" />
                <span>User Growth Analytics</span>
              </h3>
              <p className={`text-sm ${
                theme === 'dark' ? 'text-slate-400' : 'text-amber-700'
              }`}>Daily active user trends</p>
            </div>
            <div className="flex items-center space-x-2">
              <Button variant="outline" size="sm" className={selectedPeriod === '7d' ? (theme === 'dark' ? 'bg-slate-700' : 'bg-amber-200') : ''} onClick={() => setSelectedPeriod('7d')}>7D</Button>
              <Button variant="outline" size="sm" className={selectedPeriod === '30d' ? (theme === 'dark' ? 'bg-slate-700' : 'bg-amber-200') : ''} onClick={() => setSelectedPeriod('30d')}>30D</Button>
              <Button variant="outline" size="sm" className={selectedPeriod === '90d' ? (theme === 'dark' ? 'bg-slate-700' : 'bg-amber-200') : ''} onClick={() => setSelectedPeriod('90d')}>90D</Button>
            </div>
          </div>
          <div className="h-64">
            <LineChart width={500} height={250} data={mockData.analytics.dailyUsers}>
              <XAxis 
                dataKey="date" 
                axisLine={false}
                tickLine={false}
                tick={{ fontSize: 12, fill: theme === 'dark' ? '#94a3b8' : '#64748b' }}
              />
              <YAxis 
                axisLine={false}
                tickLine={false}
                tick={{ fontSize: 12, fill: theme === 'dark' ? '#94a3b8' : '#64748b' }}
              />
              <Tooltip 
                contentStyle={{
                  backgroundColor: theme === 'dark' ? '#1e293b' : '#ffffff',
                  border: 'none',
                  borderRadius: '12px',
                  boxShadow: '0 25px 50px -12px rgba(0, 0, 0, 0.25)'
                }}
              />
              <Line 
                type="monotone" 
                dataKey="users" 
                stroke="#10B981" 
                strokeWidth={3}
                dot={{ fill: '#10B981', strokeWidth: 2, r: 4 }}
                activeDot={{ r: 6, stroke: '#10B981', strokeWidth: 2, fill: '#ffffff' }}
              />
            </LineChart>
          </div>
        </div>

        {/* Enhanced Bar Chart */}
        <div className={`backdrop-blur-xl rounded-2xl p-6 shadow-xl border ${
          theme === 'dark'
            ? 'bg-slate-800/80 border-slate-700/50'
            : 'bg-amber-100/90 border-amber-300/80 shadow-amber-200/50'
        }`}>
          <div className="flex items-center justify-between mb-5">
            <div className="space-y-1">
              <h3 className={`text-lg font-black flex items-center space-x-2 ${
                theme === 'dark' ? 'text-white' : 'text-amber-900'
              }`}>
                <BarChart3 className="w-5 h-5 text-purple-600" />
                <span>Command Usage</span>
              </h3>
              <p className={`text-sm ${
                theme === 'dark' ? 'text-slate-400' : 'text-amber-700'
              }`}>Most popular bot commands</p>
            </div>
            <div className={`flex items-center space-x-2 rounded-full px-3 py-1 ${
              theme === 'dark' ? 'bg-purple-900/20' : 'bg-purple-200/70'
            }`}>
              <div className="w-2 h-2 bg-purple-500 rounded-full animate-pulse"></div>
              <span className={`text-xs font-semibold ${
                theme === 'dark' ? 'text-purple-300' : 'text-purple-800'
              }`}>Live Data</span>
            </div>
          </div>
          <div className="h-64">
            <BarChart width={500} height={250} data={mockData.analytics.commandUsage}>
              <XAxis 
                dataKey="name" 
                axisLine={false}
                tickLine={false}
                tick={{ fontSize: 12, fill: theme === 'dark' ? '#94a3b8' : '#64748b' }}
              />
              <YAxis 
                axisLine={false}
                tickLine={false}
                tick={{ fontSize: 12, fill: theme === 'dark' ? '#94a3b8' : '#64748b' }}
              />
              <Tooltip 
                contentStyle={{
                  backgroundColor: theme === 'dark' ? '#1e293b' : '#ffffff',
                  border: 'none',
                  borderRadius: '12px',
                  boxShadow: '0 25px 50px -12px rgba(0, 0, 0, 0.25)'
                }}
              />
              <Bar 
                dataKey="count" 
                fill="#8B5CF6"
                radius={[6, 6, 0, 0]}
              />
            </BarChart>
          </div>
        </div>
      </div>

      {/* Professional Servers Management Section */}
      <div className={`backdrop-blur-xl rounded-2xl p-6 shadow-xl border ${
        theme === 'dark'
          ? 'bg-slate-800/80 border-slate-700/50'
          : 'bg-amber-100/90 border-amber-300/80 shadow-amber-200/50'
      }`}>
        <div className="flex items-center justify-between mb-6">
          <div className="space-y-1">
            <h2 className={`text-xl font-black flex items-center space-x-2 ${
              theme === 'dark' ? 'text-white' : 'text-amber-900'
            }`}>
              <Globe className="w-6 h-6 text-indigo-600" />
              <span>Server Network</span>
            </h2>
            <p className={theme === 'dark' ? 'text-slate-400' : 'text-amber-700'}>Manage your Discord server ecosystem</p>
          </div>
          <div className="flex items-center space-x-3">
            <Button className="bg-gradient-to-r from-blue-600 to-purple-600 hover:from-blue-700 hover:to-purple-700 text-white border-0 shadow-lg hover:shadow-xl transition-all duration-300">
              <Bot className="w-4 h-4 mr-2" />
              Add Server
            </Button>
          </div>
        </div>
        
        <div className="grid grid-cols-1 md:grid-cols-2 xl:grid-cols-3 gap-4">
          {mockData.servers.slice(0, 6).map((server, index) => (
            <div 
              key={server.id}
              className={`group relative overflow-hidden rounded-xl p-4 border hover:shadow-xl transition-all duration-500 hover:scale-105 ${
                theme === 'dark'
                  ? 'bg-gradient-to-br from-slate-800 to-slate-750 border-slate-700/50'
                  : 'bg-gradient-to-br from-amber-50 to-amber-100 border-amber-300/80 shadow-amber-200/40 hover:shadow-amber-300/60'
              }`}
            >
              {/* Status indicator */}
              <div className="absolute top-3 right-3">
                <div className={`w-2.5 h-2.5 rounded-full ${server.botAdded ? 'bg-emerald-500' : 'bg-amber-500'} ${server.botAdded ? 'animate-pulse' : ''}`}></div>
              </div>
              
              {/* Server icon */}
              <div className="relative mb-3">
                <div className="w-12 h-12 bg-gradient-to-br from-indigo-500 to-purple-600 rounded-xl flex items-center justify-center text-white text-lg font-black shadow-lg">
                  {server.name.charAt(0)}
                </div>
                <div className={`absolute -bottom-1 -right-1 w-6 h-6 rounded-full flex items-center justify-center border-2 ${
                  theme === 'dark'
                    ? 'bg-slate-800 border-slate-700'
                    : 'bg-amber-50 border-amber-300'
                }`}>
                  <MessageSquare className={`w-3 h-3 ${
                    theme === 'dark' ? 'text-slate-400' : 'text-amber-700'
                  }`} />
                </div>
              </div>
              
              {/* Server info */}
              <div className="space-y-2">
                <div>
                  <h3 className={`text-base font-bold group-hover:text-blue-600 transition-colors duration-300 ${
                    theme === 'dark' ? 'text-white' : 'text-amber-900'
                  }`}>
                    {server.name}
                  </h3>
                  <div className={`flex items-center space-x-3 mt-1 text-xs ${
                    theme === 'dark' ? 'text-slate-400' : 'text-amber-700'
                  }`}>
                    <div className="flex items-center space-x-1">
                      <Users className="w-3 h-3" />
                      <span>{server.memberCount.toLocaleString()}</span>
                    </div>
                    <div className="flex items-center space-x-1">
                      <Hash className="w-3 h-3" />
                      <span>{server.channelCount}</span>
                    </div>
                  </div>
                </div>
                
                {/* Status badge */}
                <div className="flex items-center justify-between">
                  <div className={`inline-flex items-center space-x-1 px-2 py-1 rounded-full text-xs font-bold ${
                    server.botAdded 
                      ? (theme === 'dark' ? 'bg-emerald-900/30 text-emerald-300' : 'bg-emerald-100 text-emerald-700')
                      : (theme === 'dark' ? 'bg-amber-900/30 text-amber-300' : 'bg-amber-100 text-amber-700')
                  }`}>
                    {server.botAdded ? (
                      <>
                        <Crown className="w-3 h-3" />
                        <span>Active</span>
                      </>
                    ) : (
                      <>
                        <Zap className="w-3 h-3" />
                        <span>Setup</span>
                      </>
                    )}
                  </div>
                  
                  <Button variant="ghost" size="sm" className="opacity-0 group-hover:opacity-100 transition-opacity duration-300">
                    <Settings className="w-3 h-3" />
                  </Button>
                </div>
              </div>
              
              {/* Hover effects */}
              <div className="absolute inset-0 bg-gradient-to-r from-blue-600/5 to-purple-600/5 opacity-0 group-hover:opacity-100 transition-opacity duration-500 rounded-xl"></div>
            </div>
          ))}
        </div>
        
        {/* View all servers button */}
        <div className="mt-6 text-center">
          <Button variant="outline" className={`group border-2 border-dashed hover:border-solid transition-all duration-300 ${
            theme === 'dark'
              ? 'border-slate-600 hover:border-blue-500 hover:from-slate-800 hover:to-slate-700'
              : 'border-amber-300 hover:border-blue-300 hover:from-amber-100 hover:to-amber-200'
          } hover:bg-gradient-to-r`}>
            <Globe className="w-4 h-4 mr-2 group-hover:animate-spin" />
            View All {mockData.servers.length} Servers
          </Button>
        </div>
      </div>

      {/* Quick Actions Footer */}
      <div className="bg-gradient-to-r from-blue-600 via-purple-600 to-indigo-600 rounded-2xl p-6 text-white shadow-2xl">
        <div className="flex flex-col lg:flex-row items-center justify-between">
          <div className="space-y-1 text-center lg:text-left">
            <h3 className="text-xl font-black flex items-center justify-center lg:justify-start space-x-2">
              <Sparkles className="w-5 h-5 text-yellow-300" />
              <span>Ready to Expand?</span>
            </h3>
            <p className="text-blue-100 max-w-2xl">
              Add PiwPiw to more servers and unlock the full potential of Discord automation
            </p>
          </div>
          
          <div className="flex items-center space-x-3 mt-4 lg:mt-0">
            <Button className="bg-white/20 backdrop-blur-sm hover:bg-white/30 text-white border border-white/30 shadow-lg hover:shadow-xl transition-all duration-300">
              <Bell className="w-4 h-4 mr-2" />
              Notifications
            </Button>
            <Button className="bg-yellow-400 hover:bg-yellow-300 text-slate-900 font-bold shadow-lg hover:shadow-xl transition-all duration-300">
              <Gift className="w-4 h-4 mr-2" />
              Invite Friends
            </Button>
          </div>
        </div>
      </div>

      {/* Professional Notifications Modal */}
      {showNotifications && (
        <div 
          className="fixed inset-0 z-50 flex items-start justify-center p-2 md:p-4 bg-black/50 backdrop-blur-sm animate-in fade-in duration-300"
          onClick={(e) => {
            if (e.target === e.currentTarget) setShowNotifications(false);
          }}
        >
          <div className={`relative w-full max-w-sm md:max-w-lg mt-8 md:mt-16 rounded-2xl shadow-2xl transform transition-all duration-300 animate-in slide-in-from-top-4 ${
            theme === 'dark' 
              ? 'bg-slate-800 border border-slate-700' 
              : 'bg-white border border-amber-200 shadow-amber-200/50'
          }`}>
            {/* Header */}
            <div className={`flex items-center justify-between p-4 md:p-6 border-b ${
              theme === 'dark' ? 'border-slate-700' : 'border-amber-200/50'
            }`}>
              <div className="flex items-center space-x-3">
                <div className="p-2 bg-gradient-to-r from-blue-500 to-purple-600 rounded-xl shadow-lg">
                  <Bell className="w-4 md:w-5 h-4 md:h-5 text-white animate-bounce" />
                </div>
                <div>
                  <h3 className={`text-base md:text-lg font-bold ${theme === 'dark' ? 'text-white' : 'text-gray-900'}`}>
                    System Notifications
                  </h3>
                  <p className={`text-xs md:text-sm ${theme === 'dark' ? 'text-gray-400' : 'text-gray-600'}`}>
                    {notifications.length} recent updates
                  </p>
                </div>
              </div>
              <button
                onClick={() => setShowNotifications(false)}
                className={`p-2 rounded-xl transition-all duration-200 hover:scale-110 ${
                  theme === 'dark' ? 'hover:bg-slate-700 text-gray-400 hover:text-white' : 'hover:bg-amber-100 text-gray-600 hover:text-gray-900'
                }`}
              >
                <X className="w-4 md:w-5 h-4 md:h-5" />
              </button>
            </div>

            {/* Notifications List */}
            <div className="max-h-80 md:max-h-96 overflow-y-auto p-1 md:p-2 scrollbar-thin scrollbar-track-transparent">
              {notifications.map((notification) => {
                const IconComponent = notification.icon;
                return (
                  <div
                    key={notification.id}
                    className={`group p-3 md:p-4 m-1 md:m-2 rounded-xl border transition-all duration-300 hover:shadow-lg cursor-pointer transform hover:scale-[1.02] ${
                      theme === 'dark'
                        ? 'bg-slate-900/50 border-slate-700 hover:bg-slate-900/80 hover:border-slate-600'
                        : 'bg-amber-50/50 border-amber-200/50 hover:bg-amber-100/70 hover:border-amber-300/70 hover:shadow-amber-200/60'
                    }`}
                  >
                    <div className="flex items-start space-x-2 md:space-x-3">
                      {/* Icon */}
                      <div className={`flex-shrink-0 p-1.5 md:p-2 rounded-lg transition-all duration-200 group-hover:scale-110 ${
                        notification.type === 'success'
                          ? 'bg-emerald-500/10 text-emerald-600 group-hover:bg-emerald-500/20'
                          : notification.type === 'warning'
                          ? 'bg-amber-500/10 text-amber-600 group-hover:bg-amber-500/20'
                          : 'bg-blue-500/10 text-blue-600 group-hover:bg-blue-500/20'
                      }`}>
                        <IconComponent className="w-4 md:w-5 h-4 md:h-5" />
                      </div>

                      {/* Content */}
                      <div className="flex-1 min-w-0">
                        <div className="flex items-center justify-between mb-1">
                          <h4 className={`font-semibold text-sm md:text-base group-hover:scale-105 transition-transform ${
                            theme === 'dark' ? 'text-white' : 'text-gray-900'
                          }`}>
                            {notification.title}
                          </h4>
                          {notification.priority === 'high' && (
                            <div className="w-2 h-2 bg-red-500 rounded-full animate-pulse shadow-lg shadow-red-500/50"></div>
                          )}
                        </div>
                        <p className={`text-xs md:text-sm mb-2 leading-relaxed ${
                          theme === 'dark' ? 'text-gray-300' : 'text-gray-600'
                        }`}>
                          {notification.message}
                        </p>
                        <div className="flex items-center justify-between">
                          <span className={`text-xs font-medium ${
                            theme === 'dark' ? 'text-gray-500' : 'text-gray-500'
                          }`}>
                            {notification.timestamp}
                          </span>
                          <div className={`px-2 py-1 rounded-full text-xs font-bold uppercase tracking-wide transition-all duration-200 group-hover:scale-105 ${
                            notification.priority === 'high'
                              ? 'bg-red-500/10 text-red-600 group-hover:bg-red-500/20'
                              : notification.priority === 'medium'
                              ? 'bg-amber-500/10 text-amber-600 group-hover:bg-amber-500/20'
                              : 'bg-blue-500/10 text-blue-600 group-hover:bg-blue-500/20'
                          }`}>
                            {notification.priority}
                          </div>
                        </div>
                      </div>
                    </div>
                  </div>
                );
              })}
            </div>

            {/* Footer */}
            <div className={`flex flex-col sm:flex-row items-center justify-between p-3 md:p-4 border-t bg-gradient-to-r from-transparent to-transparent space-y-2 sm:space-y-0 ${
              theme === 'dark' ? 'border-slate-700' : 'border-amber-200/50'
            }`}>
              <button className={`text-xs md:text-sm font-semibold transition-all duration-200 hover:scale-105 ${
                theme === 'dark' ? 'text-gray-400 hover:text-white' : 'text-gray-600 hover:text-amber-700'
              }`}>
                <div className="flex items-center space-x-1 md:space-x-2">
                  <CheckCircle className="w-3 md:w-4 h-3 md:h-4" />
                  <span>Mark all as read</span>
                </div>
              </button>
              <button className="px-3 md:px-4 py-1.5 md:py-2 bg-gradient-to-r from-blue-500 to-purple-600 text-white text-xs md:text-sm font-bold rounded-lg hover:shadow-lg hover:scale-105 transition-all duration-200 active:scale-95">
                <div className="flex items-center space-x-1 md:space-x-2">
                  <Eye className="w-3 md:w-4 h-3 md:h-4" />
                  <span>View All</span>
                </div>
              </button>
            </div>
          </div>
        </div>
      )}
    </div>
  );
};

export default Dashboard;
